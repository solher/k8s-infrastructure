---
version: 0.4

env:
  NAMESPACE: 'default'
  SETUP_MO: '''mo=\"./mo --source=env/\$SUP_NETWORK.env\"'''
  MINIKUBE_EXPECTED: '[[ $(kubectl get nodes -o name) == *\"minikube\"* ]] || { echo current k8s target is not minikube; exit 1; }' 
  GCP_EXPECTED: '[[ $(kubectl get nodes -o name) != *\"minikube\"* ]] || { echo current k8s target is not GCP; exit 1; }' 

networks:
  minikube:
    hosts:
      - localhost
    env: 
      CHECK_CONTEXT: $MINIKUBE_EXPECTED 
      PREPARE: ''
  gcp:
    hosts:
      - localhost
    env: 
      CHECK_CONTEXT: $GCP_EXPECTED 
      PREPARE: ''

commands:
  prepare:
    desc: Prepare the environment.
    run: eval $CHECK_CONTEXT; eval $PREPARE

  openvpn-pki:
    desc: Init OpenVPN PKI/CA/DH/TA.
    stdin: true
    run: >
      cd openvpn/EasyRSA*;
        ./easyrsa init-pki; ./easyrsa build-ca nopass; ./easyrsa gen-dh;
        /usr/local/sbin/openvpn --genkey --secret ta.key;

  openvpn-server:
    desc: Generate a 'server' OpenVPN server cerfificate.
    stdin: true
    run: cd openvpn/EasyRSA*; ./easyrsa build-server-full server nopass

  openvpn-client:
    desc: Generate a 'client' OpenVPN client cerfificate.
    run: cd openvpn/EasyRSA*; ./easyrsa build-client-full client nopass

  openvpn:
    desc: Deploy OpenVPN.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        [[ -f openvpn/deployment-$SUP_NETWORK.mo.yml ]] || exit 0;
        $mo openvpn/deployment-$SUP_NETWORK.mo.yml | kubectl apply -f -;
        [[ -d openvpn/pki-$SUP_NETWORK ]] || exit 0;
        cd openvpn/pki-$SUP_NETWORK/server;
        kubectl --namespace=$NAMESPACE delete secret openvpn; 
        kubectl --namespace=$NAMESPACE create secret generic openvpn \
        --from-file=ca.crt \
        --from-file=dh.pem \
        --from-file=ta.key \
        --from-file=server.crt \
        --from-file=server.key;

  nginx:
    desc: Deploy Nginx.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        kubectl create configmap nginx --from-file=nginx/nginx.tmpl --dry-run -o yaml | kubectl --namespace=$NAMESPACE apply -f -;
        $mo nginx/deployment.mo.yml | kubectl apply -f -;

  default-backend:
    desc: Deploy the ingress default backend.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        $mo default-backend/deployment.mo.yml | kubectl apply -f -;
        $mo default-backend/service.mo.yml | kubectl apply -f -;

  letsencrypt:
    desc: Deploy Letsencrypt.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        [[ -f letsencrypt/configmap-$SUP_NETWORK.mo.yml ]] || exit 0;
        $mo letsencrypt/configmap-$SUP_NETWORK.mo.yml | kubectl apply -f -;
        [[ -f letsencrypt/deployment-$SUP_NETWORK.mo.yml ]] || exit 0;
        $mo letsencrypt/deployment-$SUP_NETWORK.mo.yml | kubectl apply -f -;

  styx-redis:
    desc: Deploy the Styx Redis server.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        $mo styx-redis/deployment.mo.yml | kubectl apply -f -;
        $mo styx-redis/pv-claim.mo.yml | kubectl apply -f -;
        $mo styx-redis/service.mo.yml | kubectl apply -f -;

  styx:
    desc: Deploy the Styx server.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        $mo styx/configmap.mo.yml | kubectl apply -f -;
        $mo styx/deployment.mo.yml | kubectl apply -f -;
        $mo styx/service.mo.yml | kubectl apply -f -;

  zipkin:
    desc: Deploy Zipkin.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        $mo zipkin/deployment.mo.yml | kubectl apply -f -;
        $mo zipkin/service.mo.yml | kubectl apply -f -;

  prometheus:
    desc: Deploy Prometheus.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        $mo prometheus/exporter-daemonset.mo.yml | kubectl apply -f -;
        $mo prometheus/exporter-service.mo.yml | kubectl apply -f -;
        $mo prometheus/configmap.mo.yml | kubectl apply -f -;
        $mo prometheus/deployment.mo.yml | kubectl apply -f -;
        $mo prometheus/service.mo.yml | kubectl apply -f -;
        $mo prometheus/pv-claim.mo.yml | kubectl apply -f -;

  grafana:
    desc: Deploy Grafana.
    run: >
      eval $CHECK_CONTEXT; eval $SETUP_MO;
        kubectl create configmap grafana-dashboards \
        --from-file=grafana/dashboards/grafana-net-162-dashboard.json \
        --from-file=grafana/dashboards/grafana-net-193-dashboard.json \
        --from-file=grafana/dashboards/grafana-net-2-dashboard.json \
        --from-file=grafana/dashboards/grafana-net-315-dashboard.json \
        --from-file=grafana/dashboards/prometheus-datasource.json \
        --dry-run -o yaml | kubectl --namespace=$NAMESPACE apply -f -;
        $mo grafana/deployment.mo.yml | kubectl apply -f -;
        $mo grafana/service.mo.yml | kubectl apply -f -;
        $mo grafana/pv-claim.mo.yml | kubectl apply -f -;
        $mo grafana/dashboards-job.mo.yml | kubectl delete -f -;        
        $mo grafana/dashboards-job.mo.yml | kubectl create -f -;        

targets:
  deploy:
    - prepare
    - openvpn
    - nginx
    - default-backend
    - letsencrypt
    - styx-redis
    - styx
    - zipkin
    - prometheus
    - grafana